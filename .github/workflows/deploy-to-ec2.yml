name: Deploy-To-EC2

# Trigger deployment only on push to main branch
on:
  push:
    branches:
      - main

env:
  ssh_key: ${{ secrets.EC2_SSH_KEY }}

jobs:
  build:
    name: Build executable jar
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Build with Maven
        run: mvn clean package
      #      - name: Copy ssh key
      #        run: mkdir .ssh && echo $ssh_key >> .ssh/id_rsa
      - name: list stuff
        run: ls -al && pwd && ls -al ./target
      - name: SCP files via ssh key
        uses: appleboy/scp-action@master
        with:
          USERNAME: ${{ secrets.USERNAME }}
          HOST: ${{ secrets.HOST_DNS }}
          KEY: ${{ secrets.EC2_SSH_KEY }}
          source: './target/web-service-0.0.1-SNAPSHOT.jar'
          target: '~/'
          overwrite: true
  deploy:
    name: "Deploy to staging"
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
          Host staging
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/staging.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.USERNAME }}
          SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          SSH_HOST: ${{ secrets.HOST_DNS }}

      - name: echo something
        run: ssh staging 'echo "HI" >> something.txt'
#      - name: Stop the server
#        run: ssh staging 'sudo systemctl stop my-application'
#
#      - name: Check out the source
#        run: ssh staging 'cd my-application && git fetch && git reset --hard origin/master'
#
#      - name: Start the server
#        if: ${{ always() }}
#        run: ssh staging 'sudo systemctl start my-application'